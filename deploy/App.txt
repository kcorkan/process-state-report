<!DOCTYPE html>
<html>
<head>
    <title>Process State Report</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Wed Dec 03 2014 15:13:01 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Dec 03 2014 15:13:01 GMT-0700 (MST)";
        var CHECKSUM = 41888149212;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc2/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.data.Timepoint',{
    startDate: '',
    endDate: '',
    fieldValue: '',
    constructor: function(config){
        Ext.apply(this,config);
    },    
    getDurationInHours: function(){
        //TODO Verify dates are valid
        var ms = Ext.Date.getElapsed(new Date(this.startDate),new Date(this.endDate));
        var hours = 0;
        if (ms > 0) {
            hours = Math.max(1, Math.round(ms/1000/3600));
        }
         return hours;
    },
    getDurationInDays: function(){
        var hours = this.getDurationInHours();
        if (hours > 0) {
            return hours/24;
        }
        return 0;
    }
});

Ext.define('Rally.technicalservices.data.Timeline',{
    timelineData: null, 
    timelineField: '',
    timepoints: null,
    constructor: function(config){
        Ext.apply(this,config);
    },
    setData: function(record){
        Ext.each(record.getFields(), function(f){
            if (f.name != "_id" && f.name != "_ValidTo" && f.name != "_ValidFrom"){
                if (f.name != this.timelineField){
                    this.set(f.name,record.get(f.name));
                } else {
                    this.addTimepoint(record);
                }
            }
        },this);
    },
    getHydratedData: function(wsapiHydratedFields, wsapiHydratedValues,onlyIncludeFields){
        var hydrated_fields = Object.keys(wsapiHydratedFields);
        var data = {};
        Ext.each(Object.keys(this.timelineData), function(key){
            var bInclude = true; 
            if (onlyIncludeFields && onlyIncludeFields.length > 0){
                bInclude = Ext.Array.contains(onlyIncludeFields, key);
            }
            
            if (bInclude){
                var val = this.timelineData[key];
                if (bInclude && val && val != '' && Ext.Array.contains(hydrated_fields,key)){
                    var wsapi_value_key = wsapiHydratedFields[key];
                    var new_val = wsapiHydratedValues[wsapi_value_key][val.toString()];
                    if (new_val){
                        val = new_val;
                    }
                }
                data[key] = val;
            }
        },this);
        return data;
    },
    set: function(field, value){
        if (this.timelineData == null) {
            this.timelineData = {};
        }
        this.timelineData[field] = value;
    },
    get: function(field){
        if (this.timelineData == null){
            this.timelineData = {};
        }
        return this.timelineData[field];
    },
    addTimepoint: function(record){
        //Add timepoint to the appropriate place in the array (sort by date ascending)
        if (this.timepoints == null) {
            this.timepoints = [];
        }
        var tp_val = record.get(this.timelineField);
        var tp_startDate = new Date(record.get('_ValidFrom'));
        var tp_endDate = new Date();
        
        //TODO calculate end date based on next start date
        var tp = Ext.create('Rally.technicalservices.data.Timepoint',{
            fieldValue: tp_val,
            startDate: tp_startDate,
            endDate: tp_endDate
        });
        
        var i = 0;
        for (i=0; i< this.timepoints.length; i++){
            if (tp.startDate < this.timepoints[i].startDate){
                tp.endDate = this.timepoints[i].startDate;
                if (i > 0){
                    this.timepoints[i-1].endDate = tp.startDate;  
                }
                break; 
            } 
        }

        if (i == this.timepoints.length && i > 0){
            this.timepoints[i-1].endDate = tp.startDate; 
        }
        this.timepoints.splice(i,0,tp);

    },
    getCumulativeAgeInDays: function(val){
        //TODO check if val is number or string
        var regex = new RegExp(val,"i"); //case insensitive
        var age = 0; 
        Ext.each(this.timepoints, function(tp){
            var match = tp.fieldValue.toString().match(regex);
            if (match != null && tp.fieldValue.toString() == match[0]){
                age += tp.getDurationInDays();
            }
        }, this);
        return age.toFixed(1);
    },
    getNumTransitions: function(){
        if (this.timepoints == null) {
            this.timepoints = [];
        }
        return this.timepoints.length;
    },
    getLastTransitionStartDate: function(state){
        var regex = new RegExp(state,"i"); //case insensitive
        var last_start_date = "N/A";
        Ext.each(this.timepoints, function(tp){
            var match = tp.fieldValue.toString().match(regex);
            if (match != null && tp.fieldValue.toString() == match[0]){
                last_start_date = tp.startDate;
            }
        },this);
        return last_start_date;  
    }
});

Ext.define('Rally.technicalservices.data.CalculatedStore',{
    logger: new Rally.technicalservices.Logger(),
    MAX_CHUNK_SIZE: 25,
    wsapiHydratedFields:  {
            'Project':'Project',
            'Feature':'PortfolioItem/Feature',
            'Owner':'User',
            'SubmittedBy':'User',
            'Release':'Release',
            'Iteration':'Iteration'},

    /*
     * sourceFields: fields to fetch from the store
     */
    sourceFields: null,
    /*
     * outputFields: fields that we want to display or report on
     */
    outputFields: null,
    /*
     * calculations: what calculations options are:
     *         -- timeline
     */
    timelineField: '',
    timelineStates: null,
    currentProjectId: 0,
    timelineHash: null,
    maxTimepoints: 0,
    rallyType: 'HierarchicalRequirement',
    fetchFields: '',
    
    constructor: function(config){
        Ext.apply(this,config);
    },
    
    load: function(action){
        var deferred = Ext.create('Deft.Deferred');
        this.maxTimepoints = 0;
        this._fetchLookbackStore(this.rallyType,this.currentProjectId).then({
                scope: this,
                success: function(data){
                    var tl_hash = this._mungeLookbackDataIntoTimelineHash(data);
                    this._getWsapiHydratedValues().then({
                        scope: this,
                        success: function(){

                            if (this[action]){
                                var flattened_data = this[action](tl_hash);
                                deferred.resolve(flattened_data);
                            } else {
                                deferred.reject("Invalid Action:" + action);
                            }
                        },
                        failure: function(error){
                            alert('Error Hydrating WSAPI values: ' + error);
                        }
                    });

                },
                failure: function(error){
                    deferred.reject(error);
                    alert(error);
                }
        });
        return deferred.promise;
    },
    
    initConfigs: function(){
        if (this.sourceFields == null) {
            this.sourceFields = [];    
        }
        if (this.outputFields == null) {
            this.outputFields = [];
        }
        if (this.timelineStates == null) {
            this.timelineStates = [];
        }
    },
    
    _getFetchFields: function(){
        var fetch_fields = Ext.Array.merge(this.fetchFields, [this.timelineField]);
        console.log ('fetch fields',fetch_fields);
        return fetch_fields;
    },
    
    _getHydrateFields: function(){
        var hydrated_fields = ['ScheduleState','State']; //,'Release','Iteration'];
        var fetch_hydrate = [];
        Ext.each(this._getFetchFields(), function(field){
            if (Ext.Array.contains(hydrated_fields, field)){
                fetch_hydrate.push(field);
            }
        },this);
        return fetch_hydrate;
    },
    
    _fetchLookbackStore:function(model_name, current_project_id){
        this.logger.log('_fetchLookbackStore',model_name,this.timelineField,current_project_id);
        var deferred = Ext.create('Deft.Deferred');
        
        var previous_field_name = Ext.String.format("_PreviousValues.{0}",this.timelineField); 
        var fetch_fields = this._getFetchFields();
        var fetch_hydrate = this._getHydrateFields();
        this.logger.log('_fetchLookbackStore', previous_field_name, fetch_fields, fetch_hydrate);
        Ext.create('Rally.data.lookback.SnapshotStore', {
            scope: this,
            listeners: {
                scope: this,
                load: function(store, data, success){
                    this.logger.log('fetchLookbackStore returned data',success, data);
                    deferred.resolve(data);
                }
            },
            autoLoad: true,
            fetch: fetch_fields,
            hydrate: fetch_hydrate,
            filters: [{
                property: "_TypeHierarchy",
                value: model_name
            },{
                property: previous_field_name,
                value: {$exists: true}
            },{
                property: "_ProjectHierarchy",
                value: current_project_id
            }],
            sort: {"_ValidFrom":-1}
       });         
    return deferred.promise;
    },
    _addToWsapiHydratedValues: function(rec){
        this.logger.log('_addToWsapiHydratedValues', rec);
        Ext.each(Object.keys(this.wsapiHydratedFields), function(f){
            this.logger.log('_addToWsapiHydratedValues key', f);
           
            if (rec.get(f)){
                var obj_type = this.wsapiHydratedFields[f];
                this.logger.log('_addToWsapiHydratedValues obj_type', obj_type);

                if (this.wsapiHydratedValues[obj_type] == undefined){
                    this.wsapiHydratedValues[obj_type]={};
                } 
                if (this.wsapiHydratedValues[obj_type][rec.get(f).toString()] == undefined) {
                    this.wsapiHydratedValues[obj_type][rec.get(f).toString()] = rec.get(f);
                }
            }
        },this);
    },
    _getWsapiHydratedValues: function(){
        this.logger.log('_getWsapiHydratedValues', this.wsapiHydratedValues);
        var deferred = Ext.create('Deft.Deferred');
        
        var queries = Object.keys(this.wsapiHydratedValues);
        var promises = [];
        
        Ext.each(queries, function(q){
            var values = Object.keys(this.wsapiHydratedValues[q]);
            var values_to_hydrate = [];
            Ext.each(values, function(v){
                if (this.wsapiHydratedValues[q][v].toString() == this.wsapiHydratedValues[q][v].toString()){
                    values_to_hydrate.push(v);
                }
            },this);
            
            /*
             * Set the field to hydrate
             */
            var hydrate_field = 'Name';
            if (q == 'User'){
                hydrate_field = 'DisplayName';
            }
            this.logger.log('_getWsapiHydratedValues: Hydrating',q,values_to_hydrate.length, values_to_hydrate,hydrate_field);

            if (values_to_hydrate.length > this.MAX_CHUNK_SIZE){
                var start_idx = 0;
                console.log('original array',values_to_hydrate);
                while(start_idx < values_to_hydrate.length){
                    chunk_values = values_to_hydrate.splice(start_idx, this.MAX_CHUNK_SIZE);
                    promises.push(this._loadWsapiStore(q,chunk_values,hydrate_field));
                }

            } else {
                promises.push(this._loadWsapiStore(q,values_to_hydrate,hydrate_field));
            }
        },this);
        
        if (promises.length == 0){
            deferred.resolve();
        }
        Deft.Promise.all(promises).then({
            scope: this,
            success: function(objects) {
                Ext.each(objects, function(o){
                    var obj = o[0];
                    var obj_data = o[1];
                    var obj_hydrate_field = o[2];
                     if (obj_data.length > 0){
                        Ext.each(obj_data, function(d){
                            console.log(obj_hydrate_field, d.get('ObjectID').toString(),d.get(obj_hydrate_field));
                            this.wsapiHydratedValues[obj][d.get('ObjectID').toString()] = d.get(obj_hydrate_field);
                        },this);
                    }
                },this);
                 deferred.resolve();
           },
           failure: function(){
               deferred.reject('Error hydrating wsapi fields');
           }
        });
        return deferred; 
    },
    _loadWsapiStore: function(object_type,object_ids,hydrate_field){
        this.logger.log('_loadWsapiStore',object_type,hydrate_field,object_ids);
        var deferred = Ext.create('Deft.Deferred');
        
        var filter = null;
        Ext.each(object_ids, function(oid){
            if (filter == null){
                filter = Ext.create('Rally.data.wsapi.Filter', {
                     property: 'ObjectID',
                     value: oid
                });
            } else {
                filter = filter.or(Ext.create('Rally.data.wsapi.Filter', {
                     property: 'ObjectID',
                     value: oid}));
            }
        },this);
        
        Ext.create('Rally.data.wsapi.Store', {
            model: object_type,
            filters: filter,
            autoLoad: true,
            context: {project: null},
            listeners: {
                load: function(store, data, success) {
                    if (success){
                        deferred.resolve([object_type, data, hydrate_field]);
                    } else {
                        deferred.resolve([object_type, [], hydrate_field]);
                    }
                }
            },
            fetch: ['ObjectID',hydrate_field]
        });
        
        return deferred.promise; 
    },
    _mungeLookbackDataIntoTimelineHash: function(data){
        
        var timeline_hash = {};
        this.wsapiHydratedValues = {};
        Ext.each(data, function(d){

            var formatted_id = d.get('FormattedID');
            if (timeline_hash[formatted_id] == undefined){
                timeline_hash[formatted_id] = Ext.create('Rally.technicalservices.data.Timeline',{
                    timelineField: this.timelineField,
                 });
                
                timeline_hash[formatted_id].setData(d);
                this._addToWsapiHydratedValues(d);
            } else {
                timeline_hash[formatted_id].addTimepoint(d);
            }
            var num_tp = timeline_hash[formatted_id].getNumTransitions();
            if (num_tp > this.maxTimepoints){
                this.maxTimepoints = num_tp;
            }
        }, this);
        this.logger.log('_mungeLookbackDataIntoTimelineHash records',Object.keys(timeline_hash).length);
        return timeline_hash;
    },

    getFlattenedCumulativeAgeData: function(tl_hash){
        this.logger.log('getFlattenedCumulativeAgeData', tl_hash);
        //Returns an array of data that can be plopped into a custom store or exported.  
        var data = [];
         
        var tl_states = this.timelineStates;
        Ext.each(Object.keys(tl_hash), function(key) { 
            //Calculate State Age
            var tl = tl_hash[key];
               //var row = tl.timelineData
            
            var row = tl.getHydratedData(this.wsapiHydratedFields, this.wsapiHydratedValues, this.fetchFields);
            
               //Initialize the row headers
            Ext.each(tl_states, function(state){
                row[state] = tl.getCumulativeAgeInDays(state);
            }, this);
               row['Transitions'] = tl.timepoints.length
               data.push(row);
        },this);
        return data; 
    },

    getFlattenedLastTransitionStartDateData: function(tl_hash){
        this.logger.log('getFlattenedLastTransitionStartDateData', tl_hash);
        var data = [];
        var tl_states = this.timelineStates;
        Ext.each(Object.keys(tl_hash), function(key){
            var tl = tl_hash[key];
            var row = tl.getHydratedData(this.wsapiHydratedFields, this.wsapiHydratedValues, this.fetchFields);
            console.log('after getHydratedData');
            //Initialize the row headers
            
            Ext.each(tl_states, function(state){                
                row[state] = tl.getLastTransitionStartDate(state);
            }, this);
            console.log('after each');
            row['Transitions'] = tl.getNumTransitions();
            data.push(row);
        },this);
        return data; 
    },

    getFlattenedComprehensiveData: function(tl_hash){
        this.logger.log('getFlattenedComprehensiveData',tl_hash);
        var data = [];
        var tl_states = this.timelineStates;
        var max_timepoints = this.maxTimepoints;
        Ext.each(Object.keys(tl_hash), function(key){
            var tl = tl_hash[key];
            var row = tl.getHydratedData(this.wsapiHydratedFields, this.wsapiHydratedValues, this.fetchFields);
            var counter = 0;

            if (tl.timepoints != null){
                for (var i=0; i < max_timepoints; i++){
                   var index_date = 'StartDate' + i.toString();  
                   var index_state = 'State' + i.toString(); 
                   var index_end_date = 'EndDate' + i.toString();
                   row[index_state] = '';
                   row[index_date] = '';
                   row[index_end_date] = '';
                   if (i < tl.timepoints.length){
                       var tp = tl.timepoints[i]
                       row[index_state] = tp.fieldValue.toString();
                       row[index_date] = tp.startDate;
                       row[index_end_date] = tp.endDate;
                   } 
                }
            }
            data.push(row);
        }, this);
        return data; 
     },
    statics: {
        getViewStore: function(){
            return Ext.create('Rally.data.custom.Store', {
                 data: [
                       {name:'Cumulative Age', operation:'getFlattenedCumulativeAgeData'},
                       {name:'Last Transition Date', operation:'getFlattenedLastTransitionStartDateData'}, 
                       {name:'Comprehensive View', operation:'getFlattenedComprehensiveData'}
                       ],
                 autoLoad: true
            });
        },
        getFilterOperators: function(fieldName,view){
            
            if (fieldName && fieldName.match(/StartDate/)){
                return ['on','before','after'];
            }
            if (fieldName && fieldName.match(/EndDate/)){
                return ['on','before','after'];
            }
            if (view == 'getFlattenedLastTransitionStartDateData'){
                return ['on','before','after'];
            }
            if (view == 'getFlattenedComprehensiveData'){
                return ['=','contains'];
            }
            return ['=','<','>'];
        },
        getFilterFieldType: function(fieldName, view){
            if (fieldName && fieldName.match(/StartDate/)){
                return 'DATE';
            }
            if (fieldName && fieldName.match(/EndDate/)){
                return 'DATE';
            }
            if (view == 'getFlattenedLastTransitionStartDateData'){
                return 'DATE';;
            }
            if (view == 'getFlattenedComprehensiveData'){
                return 'STRING';
            }
            if (view == 'getFlattenedCumulativeAgeData'){
                return 'DECIMAL';
            }
            return 'STRING';
        }
    }
});


Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    
    saveTextAsFile: function(textToWrite, fileName)
    {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    } 
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    items: [
        {xtype:'container',itemId:'criteria_box'},
        {xtype:'container',itemId:'button_box',layout:{type:'hbox'}, padding: 10},
        {xtype:'container',itemId:'filter_box',layout:{type:'hbox'}, padding: 10},
        {xtype:'container',itemId:'display_box'},
        {xtype:'tsinfolink'}
    ],
    launch: function() {
        this._addTypeSelector();
    },
    _addFieldSelector: function(cb){
        this.logger.log('_addArtifactFieldSelector', cb);

        if (this.down('#field-selector')){
            this.down('#field-selector').destroy();
            this.down('#additional-field-selector').destroy();
            this.down('#view-selector').destroy();
            this.down('#run-button').destroy();
            this.down('#export-button').destroy();

            if (this.down('#report-grid')){
                this.down('#report-grid').destroy();
            }
        }
    
        var model_type = cb.getValue();
        var cb_field = this.down('#criteria_box').add({
            xtype: 'rallyfieldcombobox',
            fieldLabel: 'Field type',
            itemId: 'field-selector',
            model: model_type,
            labelWidth: 100,
            minWidth: 300
        }); 
    
        var cb_fieldpicker = this.down('#criteria_box').add({
            xtype: 'rallyfieldpicker',
            autoExpand: false,
            modelTypes: [model_type],
            margin: '0 0 5 0',
            fieldLabel: 'Additional Display Columns',
            alwaysExpanded: false,
            itemId: 'additional-field-selector',
            minWidth: 300,
            alwaysSelectedValues: ['FormattedID','Name'],
        });

        var field_store = cb_field.getStore();
        field_store.on('load',this._filterDropDownList,this);

       this.down('#criteria_box').add({
            xtype: 'rallycombobox',
            store: Rally.technicalservices.data.CalculatedStore.getViewStore(),
            itemId: 'view-selector',
            displayField: 'name',
            valueField: 'operation',
            fieldLabel: 'View',
            labelWidth: 100,
            minWidth: 300
        });

        /*
         * Action Buttons
         */
        this.down('#button_box').add({
            xtype: 'rallybutton',
            text: 'Run',
            itemId: 'run-button',
            scope: this,
            handler: this._run,
            margin: '0 10 0 95'
        });
        this.down('#button_box').add({
            xtype: 'rallybutton',
            text: 'Export',
            itemId: 'export-button',
            scope: this,
            handler: this._exportData,
            disabled: true,
            margin: '0 10 0 0'
        });
    },

    _filterPickerDropDownList: function() {
        var fields = this.down('#field-selector').getModel().getFields();
        this.logger.log('_filterPickerDropDownList');
        var whitelist_types = ['STRING','BOOLEAN','TEXT','INTEGER','DECIMAL','DATE','OBJECT','STATE'];
        var whitelist_fields = [];
       
        Ext.each(fields, function(f){
            if (f.attributeDefinition){
                if (Ext.Array.contains(whitelist_types,f.attributeDefinition.AttributeType)){
                    whitelist_fields.push(f.name);
                }
            }
        });
        this.down('#additional-field-selector').setFieldWhiteList(whitelist_fields);
    },
    _addTypeSelector: function(){
        this.logger.log('_addTypeSelector');
        
        var filters = Ext.create('Rally.data.wsapi.Filter',{
            property:'ElementName',
            value: 'HierarchicalRequirement'
        });
        filters = filters.or(Ext.create('Rally.data.wsapi.Filter',{
            property:'ElementName',
            value: 'Defect'
        }));
        filters = filters.or(Ext.create('Rally.data.wsapi.Filter',{
            property:'ElementName',
            operator: 'contains',
            value: 'Portfolio'
        }));
        this.down('#criteria_box').add({
            xtype: 'rallycombobox',
            displayField: 'DisplayName',
            fieldLabel: 'Artifact type',
            valueField: 'TypePath',
            itemId: 'type-selector',
            stateId: 'artifact-type',
            stateful: true,
            stateEvents: ['change'],
            labelWidth: 100,
            minWidth: 300,
            storeConfig: {
                autoLoad: true,
                model: 'TypeDefinition',
                filters: filters
            },
            listeners: {
                scope: this,
                change: this._addFieldSelector
            }
        }); 
    },
    _filterDropDownList: function(store,records) {
        store.filter([{
            filterFn:function(field){ 
                var valid = false;
                var field_def= field.get('fieldDefinition');
                if (!field_def.attributeDefinition){
                	return false;
                }
                if (field_def.attributeDefinition.ReadOnly == true){
                    return false;
                }
                if ( field_def.attributeDefinition.AllowedValues.length > 0) {
                	valid = true;
                }
                return valid;
            } 
        }]);
        this.down('#field-selector').setValue(store.getAt(1));
        this._filterPickerDropDownList()
    },
    
    _getProcessStates: function(field){
        var process_states = [];
        if (field.get('fieldDefinition').attributeDefinition.AttributeType == 'BOOLEAN'){
            return ["true","false"];
        }
    
        Ext.each(field.get('fieldDefinition').attributeDefinition.AllowedValues, function(av){
            if (av.StringValue){
                process_states.push(av.StringValue);
            }
        },this);
        this.logger.log('_getProcessStates', process_states);
        return process_states;
    },
    
    _getFetchFields: function(){
        this.logger.log('_getFetchFields');
        
        var selected_values = [];
        Ext.each(this.down('#additional-field-selector').getValue(), function(obj){
            selected_values.push(obj.get('name'));
        },this);
        
        var fetch_fields = Ext.Array.merge(this.down('#additional-field-selector').getAlwaysSelectedValues(),
                selected_values);
        this.logger.log('_getFetchFields returning', fetch_fields);
        return fetch_fields;
    },
    
    _run: function(){
        this.logger.log('_generateReport');
        
        this.setLoading(true);
        
        //Get Settings
        var model = this.down('#type-selector').getValue();
        var field = this.down('#field-selector').getRecord(); 
        var action = this.down('#view-selector').getValue();
        var process_states = this._getProcessStates(field);
        var fetch_fields = this._getFetchFields();

        var project_id = this.getContext().getProject().ObjectID; 
        this.logger.log('Run settings:',model,field,action,process_states,project_id);
        
        var field_name = field.get('fieldDefinition').name;  
        var cs = Ext.create('Rally.technicalservices.data.CalculatedStore',{
            timelineField: field_name,
            currentProjectId: project_id,
            timelineStates: process_states,
            rallyType: model,
            fetchFields: fetch_fields
        });
        cs.load(action).then({
            scope: this,
            success: function(data){
                this.logger.log('CalculatedStore.load Success', data.length);
                this.exportData = data; 

                var store = Ext.create('Rally.data.custom.Store', {
                    data: data,
                    autoLoad: true,
                    remoteFilter: false,
                    remoteSort: false,
                    pageSize: 200
                });
                
                /*
                 * Filter and Grid Controls 
                 */ 
                var columns = Object.keys(data[0]);  
                this._addFilterControls(columns);

                var gcolcfgs = [];
                Object.keys(data[0]).forEach(function(key) {
                    var colcfgs = {};
                    if (key == 'Name'){
                        colcfgs['flex'] = 1;
                    }
                    colcfgs['dataIndex'] = key;
                    colcfgs['text'] = key;
                    gcolcfgs.push(colcfgs);
                });

                if (this.down('#report-grid')){
                    this.down('#report-grid').destroy();
                }
                
                this.down('#display_box').add({
                    xtype:'rallygrid',
                    store: store,
                    itemId: 'report-grid',
                    columnCfgs: gcolcfgs,
                    showPagingToolbar: true,
                    pagingToolbarCfg: {
                        store: store,
                        pageSizes: [100,200,500,1000]
                    }
                });
                this.down('#export-button').setDisabled(false);
                this.setLoading(false);
            },
            failure: function(){
                this.setLoading(false);
            }
        });
    },
    _exportData: function(){
        this.logger.log('_exportData');
        var fileName = 'data.csv';
        var keys = [];
        var data = this.exportData;
        keys = Object.keys(data[0]);

         var text = keys.join(',') + '\n';
        Ext.each(data, function(d){
             Ext.each(keys, function(key){
                 var val = d[key] || '';
                 if (/\n|,|\t/.test(val)){
                       text += Ext.String.format("\"{0}\",", val);
                 } else {
                     text += Ext.String.format("{0},", val);
                 }
             });
             text += '\n';
        });
        Rally.technicalservices.FileUtilities.saveTextAsFile(text, fileName.toString());
    },
    
    /*
     * Filter Functions
     * 
     */
    _addFilterControls: function(columns){
      this.down('#filter_box').removeAll();  
        
      this.logger.log('_addFilterControls',columns);
        var cb = this.down('#filter_box').add({
            xtype: 'rallycombobox',
            fieldLabel: 'Filter Results By',
            labelAlign: 'right',
            itemId: 'filter-property',
            store: this._getFilterPropertyStore(columns),
            displayField: 'name',
            valueField: 'name',
            padding: 5,
            listeners: {
                scope: this,
                change: this.addFilterCriteriaBoxes
            }              
        });
        cb.setValue('Name');

    },
    _isValidDate: function(d){
        this.logger.log('_isValidDate', d,Object.prototype.toString.call(d) );
        if ( Object.prototype.toString.call(d) === "[object Date]" ) {
            if ( isNaN( d.getTime() ) ) {  // d.valueOf() could also work
                return false;
            }
          }
          else {
              return false;
          }
        return true;
    },
    _filterGridWithCustomStore: function(){
          var special_xtypes = ['rallyprojectpicker','rallyusersearchcombobox','rallyreleasecombobox','rallyiterationcombobox'];
          var prop = this.down('#filter-property').getValue();
          var val = this.down('#filter-value').getValue(); 
          if (Ext.Array.contains(special_xtypes, this.down('#filter-value').xtype)){
              if (this.down('#filter-value').xtype == 'rallyusersearchcombobox'){
                  val = this.down('#filter-value').getRecord().get('DisplayName');
              } else {
                  val = this.down('#filter-value').getRecord().get('Name');
              }
          }
          
          console.log(val,typeof(val));
          var op = undefined;
          if (this.down('#filter-operator')){
              op = this.down('#filter-operator').getValue(); 
          }
          this.logger.log('filter', prop, op, val);

          this.down('#report-grid').getStore().filter({filterFn:function(item){
            
            var current_val = item.get(prop);
            var current_number = Number(current_val);
            
            console.log('parse', current_date, current_number, current_val);
            switch (op){
                    case '>=':
                        if (current_number.isNaN()){ return false;}
                        return current_number >= val;
                    case '<=':
                        if (current_number.isNaN()){ return false;}
                        return current_number <= val;
                    case '>':
                        if (current_number.isNaN()){ return false;}
                        return current_number > val;
                    case '<':
                        if (current_number.isNaN()){ return false;}
                        return current_number < val;
                    case 'contains':
                        var re = new RegExp(val,'gi');
                        return re.test(current_val);
                    case 'on':
                        var target_date = Date.parse(val);
                        var current_date = Date.parse(current_val);
                        if (!isNaN(target_date) && !isNaN(current_date)){
                            var td = Rally.util.DateTime.toIsoString(new Date(target_date), false);
                            var cd = Rally.util.DateTime.toIsoString(new Date(current_date), true);
                            console.log(td.substring(0,10),cd.substring(0,10));
                            return (td.substring(0,10) == cd.substring(0,10));
                        } else {
                            return false;  
                        }
                    case 'before':
                        var target_date = Date.parse(val);
                        var current_date = Date.parse(current_val);
                        if (!isNaN(target_date) && !isNaN(current_date)){
                            return target_date > current_date;
                       } else {
                            return false;  
                        }
                    case 'after':
                        var target_date = Date.parse(val);
                        var current_date = Date.parse(current_val);
                        if (!isNaN(target_date) && !isNaN(current_date)){
                            return target_date < current_date;
                       } else {
                            return false;  
                        }
 
                    case '=':
                    case undefined:
                        return current_val.toLowerCase() == val.toLowerCase();  
                }
                return false; 
        }});
    },

    addFilterCriteriaBoxes: function(cb, newValue){
        this.logger.log('addFilterCriteriaBoxes', newValue);
        if (this.down('#filter-operator')){this.down('#filter-operator').destroy();}
        if (this.down('#filter-value')){this.down('#filter-value').destroy();}
        if (this.down('#filter-button')){this.down('#filter-button').destroy();}
        if (this.down('#clear-filter-button')){this.down('#clear-filter-button').destroy();}
       
        var operator_store = this._getFilterOperatorStore(newValue);
        if (operator_store != null){
            var cbo = this.down('#filter_box').add({
                xtype: 'rallycombobox',
                itemId: 'filter-operator',
                displayField: 'name',
                valueField: 'name',
                padding: 5,
                store: this._getFilterOperatorStore(newValue)
            });
        }
        
        var filter_value_ctl = this._getFilterValueControl(newValue);
        console.log(filter_value_ctl);
        this.down('#filter_box').add(filter_value_ctl);         
        
        this.down('#filter_box').add({
            xtype: 'rallybutton',
            itemId: 'filter-button',
            scope: this, 
            text: 'Filter',
            margin: 5,
            handler: this._filterGridWithCustomStore
        });
        
        this.down('#filter_box').add({
            xtype: 'rallybutton',
            itemId: 'clear-filter-button',
            scope: this, 
            text: 'Clear',
            margin: 5,
            handler: this._clearGridFilter
        });

    },
    _getFilterValueControl: function(newVal){
        
        var ctl = {
                xtype: 'rallytextfield',
                padding: 5,
                itemId: 'filter-value'
            };

        var field = this.down('#field-selector').getModel().getField(newVal);
        var view = this.down('#view-selector').getValue();
        var type = 'STRING';
        if (field && field.attributeDefinition){
            type = field.attributeDefinition.AttributeType;
        } else {
            type = Rally.technicalservices.data.CalculatedStore.getFilterFieldType(newVal,view);
        }
        var model_name = this.down('#field-selector').getModel().getName();

        switch(type){
          case 'BOOLEAN':  
               ctl = {
                        xtype: 'rallycombobox',
                        padding: 5,
                        itemId: 'filter-value',
                        store: ['true','false']
                    };
                  break;
          case 'DATE':
              ctl = {
                  xtype: 'rallydatefield',
                  itemId: 'filter-value',
                  padding: 5
              };
              break; 
          case 'TEXT':
          case 'STRING':
          case 'STATE':
          case 'RATING':
              if (field){
                  if (field.attributeDefinition.AttributeType == 'RATING' || 
                          field.attributeDefinition.AttributeType == 'STATE' ||
                          field.attributeDefinition.AllowedValues.length > 0){
                  ctl = {
                              xtype: 'rallyfieldvaluecombobox',
                              model: model_name,
                              padding: 5,
                              itemId: 'filter-value',
                              field: field.name
                      };
                  }
              }
              break;
          case 'OBJECT':
              //Release, Iteration, User, Project, artifact links
              var schema = field.attributeDefinition.SchemaType;
              if (schema == 'Iteration') {
                  ctl = {
                        xtype: 'rallyiterationcombobox',
                        itemId: 'filter-value',
                        padding: 5
                  };
              } else if (schema == 'Release') {
                  ctl = {
                      xtype: 'rallyreleasecombobox',
                      itemId: 'filter-value',
                      padding: 5
                  };
              } else if (schema == 'User') {
                ctl = {
                      xtype: 'rallyusersearchcombobox',
                      project: this.getContext().getProject(),
                      itemId: 'filter-value',
                      padding: 5
                    };
                } else if (schema == 'Project') {
                    ctl = {
                            xtype: 'rallyprojectpicker',
                            itemId: 'filter-value',
                            padding: 5
                    };
                  
              } else if (schema == 'State'){
                ctl = {
                        xtype: 'rallyfieldvaluecombobox',
                        itemId: 'filter-value',
                        padding: 5,
                        model: model_name,
                        field: field.name
                };

              }
              break;
          case 'DECIMAL':
          case 'INTEGER':
        }
        return ctl; 
    },
    _clearGridFilter: function(){
        if (this.down('#report-grid')){
          this.down('#report-grid').getStore().clearFilter();
        }
        
        this.down('#filter-property').setValue('');
        if (this.down('#filter-operator')){
            this.down('#filter-operator').destroy();
        }
        if (this.down('#filter-value')){
          this.down('#filter-value').destroy();
        }
    },
    _getFilterPropertyStore: function(columns){
              this.logger.log('_getFilterPropertyStore');
        
              var data = [];
            Ext.each(columns, function(col){
                data.push( {'name': col} );
            },this);
            
            var fb_store = Ext.create('Rally.data.custom.Store', {
                data: data,
                autoLoad: true
            });
            return fb_store; 
    },

    _getFilterOperatorStore: function(newVal){
        this.logger.log('_getFilterOperatorStore', newVal, field);
        
        var field = this.down('#field-selector').getModel().getField(newVal);
        var view = this.down('#view-selector').getValue();
        
        var data = [];
        var operators = [];
        if (field && field.name.toLowerCase() == newVal.toLowerCase()) {
            switch(field.attributeDefinition.AttributeType){
                case 'STRING':
                case 'TEXT':
                    operators = ['=','contains'];
                    break;
                case 'DECIMAL':
                case 'INTEGER':
                    operators = ['=','<=','>=','<','>'];
                    break;  
                case 'DATE':
                    operators = ['on','before', 'after'];
            }
       } else {
            //This is a derived field
            operators = Rally.technicalservices.data.CalculatedStore.getFilterOperators(newVal, view);
        }

        Ext.each(operators, function(op){
            data.push({'name':op});
        });
        
        if (data.length == 0){
            return null;
        }
        
        var fb_store = Ext.create('Rally.data.custom.Store', {
            data: data,
            autoLoad: true
        });
        return fb_store; 
    }
});
            
               Rally.launchApp('CustomApp', {
                   name: 'Process State Report'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>